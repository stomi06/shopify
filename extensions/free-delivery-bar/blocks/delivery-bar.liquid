{% comment %}
  Free Delivery Bar Block
  Settings are managed through the app panel and saved in metafields
{% endcomment %}

{% assign settings = shop.metafields.free_delivery_app.settings.value %}
{% assign backend_url = settings.app_url | default: 'https://shopify-ige3.onrender.com' %}

<!-- Preload domyślnej ikony dla szybszego ładowania -->
{% unless settings.icon_type == 'custom' and settings.icon_image %}
  <link rel="preload" as="image" href="{{ backend_url }}/assets/default-delivery-icon.png">
{% endunless %}

<style>  .free-delivery-bar {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    text-align: center;
    height: {{ settings.bar_height | default: 40 }}px;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 3;
    transition: opacity 0.4s ease;
    left: 50%;
    transform: translateX(-50%);
    
    /* TŁO - przezroczyste lub kolorowe */
    {% if settings.transparent_bg == true %}
      background-color: transparent;
    {% else %}
      background-color: {{ settings.background_color | default: '#4CAF50' }};
    {% endif %}
    
    /* Pozostałe style */
    color: {{ settings.text_color | default: '#ffffff' }};
    font-size: {{ settings.font_size | default: 14 }}px;
    font-weight: {{ settings.font_weight | default: 600 }};
    border-radius: {{ settings.border_radius | default: 6 }}px;
    
    /* Ramka */
    {% if settings.border_width and settings.border_width > 0 %}
      border: {{ settings.border_width }}px solid {{ settings.border_color | default: '#cccccc' }};
    {% else %}
      border: none;
    {% endif %}
    
    /* Cień */
    {% if settings.shadow_blur and settings.shadow_blur > 0 %}
      {% assign shadow_opacity = settings.shadow_opacity | default: 20 | divided_by: 100.0 %}
      {% assign shadow_distance = settings.shadow_distance | default: 2 %}
      {% assign shadow_blur = settings.shadow_blur | default: 4 %}
      box-shadow: 0 {{ shadow_distance }}px {{ shadow_blur }}px rgba(0, 0, 0, {{ shadow_opacity }});
    {% else %}
      box-shadow: none;
    {% endif %}
    
    {% if settings.position == 'fixed' %}
      position: fixed;
      margin-top: {{ settings.margin_top }}px;
      left: 50%;
      transform: translateX(-50%);
    {% else %}
      position: absolute;
      z-index: 1;
      margin-top: {{ settings.margin_top }}px;
      left: 50%;
      transform: translateX(-50%);
    {% endif %}
  }
  
  /* 🔥 OPACITY - TYLKO RAZ! */
  .free-delivery-bar:not(.fade-out) {
    {% assign opacity = settings.opacity | default: 100 | divided_by: 100.0 %}
    opacity: {{ opacity }};
  }

  .free-delivery-bar.fade-out {
    opacity: 0 !important;
  }
  
  .free-delivery-bar.hidden {
    display: none;
  }
  
  .free-delivery-bar button {
    background: none;
    border: none;
    color: inherit;
    position: absolute;
    top: 8px;
    right: 12px;
    cursor: pointer;
    font-size: 18px;
    padding: 0;
    opacity: 0.8;
    line-height: 1;
  }
  
  .free-delivery-bar button:hover {
    opacity: 1;
  }
  
  /* Zastąp sekcję CSS dla ikon: */
  .delivery-bar-content {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: {{ settings.icon_gap | default: 8 }}px;
    height: 100%; /* Dodaj tę linię */
  }
  /* Zmodyfikuj style dla .delivery-icon */
  .delivery-icon {
    width: {{ settings.icon_size | default: 20 }}px !important;
    height: {{ settings.icon_size | default: 20 }}px !important;
    max-height: {{ settings.icon_size | default: 20 }}px !important;
    min-height: {{ settings.icon_size | default: 20 }}px !important;
    max-width: {{ settings.icon_size | default: 20 }}px !important;
    min-width: {{ settings.icon_size | default: 20 }}px !important;
    object-fit: contain !important;
    flex-shrink: 0 !important;
    display: block !important;
    transition: none !important; 
    box-sizing: content-box !important;
    aspect-ratio: 1 !important;
    /* Zapobiega rozciąganiu podczas ładowania */
    background-color: transparent !important;
    background-size: contain !important;
    background-repeat: no-repeat !important;
    background-position: center !important;
  }
</style>

<div class="free-delivery-bar" 
     id="free-delivery-bar"
     data-threshold="{{ settings.min_amount | default: 199 }}"
     data-message="{{ settings.message | default: 'Free delivery on orders over $199!' }}"
     data-success-message="{{ settings.success_message | default: 'Congratulations! You have free delivery!' }}"
     data-show-success="{% if settings.show_success_message == false %}false{% else %}true{% endif %}"     data-bg-color="{{ settings.background_color | default: '#4CAF50' }}"
     data-width="{{ settings.width | default: 90 }}"
     data-margin-top="{{ settings.margin_top | default: 20 }}"
     data-bar-height="{{ settings.bar_height | default: 40 }}"
     data-icon-size="{{ settings.icon_size | default: 20 }}"
     data-transparent-bg="{% if settings.transparent_bg == true %}true{% else %}false{% endif %}">  <div class="delivery-bar-content">
    {% if settings.show_icon %}
      {% if settings.icon_type == 'custom' and settings.icon_image %}
        <img class="delivery-icon" 
             src="{{ settings.icon_image }}" 
             alt="Delivery"
             width="{{ settings.icon_size }}" 
             height="{{ settings.icon_size }}" 
             style="width: {{ settings.icon_size }}px !important; height: {{ settings.icon_size }}px !important; max-height: {{ settings.icon_size }}px !important; min-height: {{ settings.icon_size }}px !important;" />      {% else %}
        <img class="delivery-icon" 
             src="{{ backend_url }}/assets/default-delivery-icon.png" 
             alt="Delivery"
             width="{{ settings.icon_size }}" 
             height="{{ settings.icon_size }}" 
             loading="eager"
             style="width: {{ settings.icon_size }}px !important; height: {{ settings.icon_size }}px !important; max-height: {{ settings.icon_size }}px !important; min-height: {{ settings.icon_size }}px !important; background-color: transparent; display: block;" />
      {% endif %}
    {% endif %}
    
    <span id="delivery-message">
      {% assign message = settings.message | default: "Free delivery on orders over $199!" %}
      {{ message }}
    </span>
  </div>
  
  {% if settings.closeable == true %}
    <button id="close-delivery-bar">×</button>
  {% endif %}
</div>

<script>
(function() {
  // Zabezpieczenie przed wielokrotnym uruchomieniem
  if (window.freeDeliveryBarInitialized) {
    return;
  }
  window.freeDeliveryBarInitialized = true;

  const deliveryBar = document.getElementById('free-delivery-bar');
  const messageElement = document.getElementById('delivery-message');
  const closeButton = document.getElementById('close-delivery-bar');
  
  if (!deliveryBar) {
    console.error('Nie znaleziono elementu free-delivery-bar');
    return;
  }
    // 🔥 TERAZ odczytaj zapisaną wiadomość (po zdefiniowaniu messageElement)
  const savedMessage = localStorage.getItem('deliveryBarMessage');
  const savedBarState = localStorage.getItem('deliveryBarState'); // hidden/visible

  // 🧹 WYCZYŚĆ LOCALSTORAGE Z IKON - może zawierać stare HTML z ikonami
  if (savedMessage && (savedMessage.includes('<img') || savedMessage.includes('delivery-icon'))) {
    console.log('🧹 Clearing localStorage - contains old icon HTML');
    localStorage.removeItem('deliveryBarMessage');
  } else if (savedMessage) {
    messageElement.textContent = savedMessage; // ← textContent zamiast innerHTML!
    console.log('📱 Restored message from localStorage:', savedMessage);
  }

  // Ustaw stan paska na podstawie zapisanego stanu
  if (savedBarState === 'hidden') {
    deliveryBar.classList.add('hidden');
    console.log('📱 Restored bar state: hidden');
  } else if (savedBarState === 'visible') {
    deliveryBar.classList.remove('hidden');
    console.log('📱 Restored bar state: visible');
  }
  
  const threshold = parseInt(deliveryBar.getAttribute('data-threshold'));
  const originalMessage = deliveryBar.getAttribute('data-message');
  const successMessage = deliveryBar.getAttribute('data-success-message');
  const showSuccess = deliveryBar.getAttribute('data-show-success') === 'true';  const bgColor = deliveryBar.getAttribute('data-bg-color');
  const width = parseInt(deliveryBar.getAttribute('data-width')) || 90;  const marginTop = parseInt(deliveryBar.getAttribute('data-margin-top'));
  const barHeight = parseInt(deliveryBar.getAttribute('data-bar-height')) || 40;
  const iconSize = parseInt(deliveryBar.getAttribute('data-icon-size')) || 20;
  const transparentBg = deliveryBar.getAttribute('data-transparent-bg') === 'true';

  console.log('=== FREE DELIVERY BAR INIT ===');
  console.log('Threshold:', threshold);
  console.log('📏 Icon size from data:', iconSize);
    // USTAW SZEROKOŚĆ, MARGIN-TOP I WYSOKOŚĆ DYNAMICZNIE
  deliveryBar.style.setProperty('width', width + '%', 'important');
  deliveryBar.style.setProperty('margin-top', marginTop + 'px', 'important');
  deliveryBar.style.setProperty('height', barHeight + 'px', 'important');
  // 🔧 STABILIZACJA IKON - zastosuj wymiary natychmiast
  let stabilizationInProgress = false; // Zapobiega wielokrotnej stabilizacji
    function stabilizeIcons() {
    if (stabilizationInProgress) {
      console.log('🚫 Stabilization already in progress, skipping...');
      return;
    }
    
    stabilizationInProgress = true;
    const icons = deliveryBar.querySelectorAll('.delivery-icon');
    console.log('🔧 Stabilizing', icons.length, 'icons with size:', iconSize + 'px');
    
    icons.forEach(icon => {
      const targetSize = iconSize + 'px';
      
      // Ustaw wszystkie wymiary na raz
      icon.style.setProperty('width', targetSize, 'important');
      icon.style.setProperty('height', targetSize, 'important');
      icon.style.setProperty('min-width', targetSize, 'important');
      icon.style.setProperty('min-height', targetSize, 'important');
      icon.style.setProperty('max-width', targetSize, 'important');
      icon.style.setProperty('max-height', targetSize, 'important');
      icon.style.setProperty('object-fit', 'contain', 'important');
      icon.style.setProperty('flex-shrink', '0', 'important');
      
      console.log('🎯 Icon set to:', targetSize);
    });
    
    // Reset flag po krótkiej chwili
    setTimeout(() => {
      stabilizationInProgress = false;
    }, 100);
  }
  // Uruchom stabilizację natychmiast i po załadowaniu
  stabilizeIcons();
  
  // 🧪 DEBUGGING - sprawdź czy ikony istnieją
  setTimeout(() => {
    const icons = deliveryBar.querySelectorAll('.delivery-icon');
    console.log('🧪 Current icons found:', icons.length);
    icons.forEach((icon, index) => {
      console.log(`🖼️ Icon ${index}:`, {
        width: icon.style.width,
        height: icon.style.height,
        src: icon.src?.substring(0, 50) + '...',
        computedWidth: window.getComputedStyle(icon).width,
        computedHeight: window.getComputedStyle(icon).height
      });
    });
  }, 2000);
  
  // Check if bar was previously closed
  if (localStorage.getItem('deliveryBarClosed') === 'true') {
    deliveryBar.classList.add('hidden');
    return;
  }
  
  let isBarVisible = !deliveryBar.classList.contains('hidden');

  // Update delivery message based on cart value
  function updateDeliveryMessage() {
    fetch('/cart.js')
      .then(response => response.json())
      .then(cart => {
        const cartTotal = cart.total_price / 100;
        console.log('🔄 Cart update - total:', cartTotal, 'threshold:', threshold);
        
        let finalMessage = originalMessage;
        
        if (cartTotal >= threshold) {
          // THRESHOLD REACHED
          if (showSuccess) {
            // 🔥 ANIMUJ TYLKO JEŚLI PASEK BYŁ UKRYTY
            if (!isBarVisible) {
              fadeInBar();
            }
            isBarVisible = true;
            localStorage.setItem('deliveryBarState', 'visible');
              if (successMessage && successMessage.trim() !== '') {
              finalMessage = successMessage;
            } else {
              finalMessage = '🎉 You have free delivery!';
            }
            
            messageElement.textContent = finalMessage; // ← textContent zamiast innerHTML!
            
            // Zmień kolor na zielony (sukces)
            if (!transparentBg) {
              deliveryBar.style.backgroundColor = '#4CAF50';
            }
            
            console.log('✅ Showing success message');
          } else {
            // 🔥 ANIMUJ TYLKO JEŚLI PASEK BYŁ WIDOCZNY  
            if (isBarVisible) {
              fadeOutBar(() => {
                localStorage.setItem('deliveryBarState', 'hidden');
              });
            }
            isBarVisible = false;
            return;
          }
        } else {
          // PRÓG NIE OSIĄGNIĘTY
          // 🔥 ANIMUJ TYLKO JEŚLI PASEK BYŁ UKRYTY
          if (!isBarVisible) {
            fadeInBar();
          }
          isBarVisible = true;
          localStorage.setItem('deliveryBarState', 'visible');
          
          const remaining = threshold - cartTotal;
            finalMessage = originalMessage
            .replace('{amount}', threshold)
            .replace('{remaining}', remaining.toFixed(2));
          
          messageElement.textContent = finalMessage; // ← textContent zamiast innerHTML!
          
          // Przywróć oryginalny kolor
          if (!transparentBg) {
            deliveryBar.style.backgroundColor = bgColor;
          }
          
          console.log('📊 Normal message - remaining:', remaining.toFixed(2));
        }
        
        // 🔥 ZAPISZ W LOCALSTORAGE
        localStorage.setItem('deliveryBarMessage', finalMessage);
      })
      .catch((error) => {
        console.error('❌ Cart fetch error:', error);
        // Fallback
        deliveryBar.classList.remove('hidden');
        let message = originalMessage.replace('{amount}', threshold);
        messageElement.innerHTML = message;
      });
  }
  
  // Funkcje animacji
  function fadeOutBar(callback) {
    deliveryBar.classList.add('fade-out');
    setTimeout(() => {
      deliveryBar.classList.add('hidden');
      deliveryBar.classList.remove('fade-out');
      if (callback) callback();
    }, 400);
  }

  function fadeInBar() {
    // 🔥 NAJPIERW USTAW OPACITY NA 0
    deliveryBar.classList.add('fade-out');
    deliveryBar.classList.remove('hidden');
    
    // 🔥 WYMYŚ REFLOW I NASTĘPNIE ANIMUJ
    deliveryBar.offsetHeight; // Force reflow
    
    setTimeout(() => {
      deliveryBar.classList.remove('fade-out');
    }, 10); // Krótkie opóźnienie
  }
    // Obsługa zamknięcia paska
  if (closeButton) {
    closeButton.addEventListener('click', function() {
      deliveryBar.classList.add('hidden');
      localStorage.setItem('deliveryBarClosed', 'true');
      console.log('Bar closed by user');
    });
  }
  
  // 🔥 NATYCHMIASTOWA AKTUALIZACJA
  let lastCartTotal = null;
  
  // Polling function - sprawdza co sekundę
  function pollCartChanges() {
    fetch('/cart.js')
      .then(response => response.json())
      .then(cart => {
        const currentTotal = cart.total_price / 100;
        
        // Aktualizuj tylko gdy wartość się zmieniła
        if (currentTotal !== lastCartTotal) {
          lastCartTotal = currentTotal;
          console.log('🔔 Cart change detected:', currentTotal);
          updateDeliveryMessage();
        }
      })
      .catch(() => {
        // Ignoruj błędy w tle
      });
  }
  
  // Nasłuchuj standardowych eventów Shopify
  const cartEvents = [
    'cart:updated',
    'cart:changed',
    'cartChanged',
    'ajaxCart:updated'
  ];
  
  cartEvents.forEach(eventName => {
    document.addEventListener(eventName, function() {
      console.log('🔔 Cart event:', eventName);
      setTimeout(updateDeliveryMessage, 100);
    });
  });
    // Intercept fetch requests do koszyka
  const originalFetch = window.fetch;
  window.fetch = function(...args) {
    const promise = originalFetch.apply(this, args);
    
    // Sprawdź czy to request do koszyka
    const url = args[0];
    if (typeof url === 'string' && (
      url.includes('/cart/add') || 
      url.includes('/cart/update') || 
      url.includes('/cart/change') ||
      url.includes('/cart/clear')
    )) {      promise.then(() => {
        console.log('🔔 Cart fetch detected:', url);
        setTimeout(updateDeliveryMessage, 200);
      }).catch(() => {});
    }
    
    return promise;
  };
  
  // Polling jako backup - co sekundę
  setInterval(pollCartChanges, 1000);
    // Inicjalizacja
  console.log('🚀 Initializing...');
  updateDeliveryMessage();
  
})();
</script>

{% schema %}
{
  "name": "Free Delivery Bar",
  "target": "section",
  "settings": [
    {
      "type": "paragraph",
      "content": "All settings (message, colors, position, styles) are managed through the app panel. This block automatically fetches settings from the app."
    },
    {
      "type": "paragraph", 
      "content": "To configure the bar, go to: Apps → Free Delivery → Settings"
    }
  ]
}
{% endschema %}
