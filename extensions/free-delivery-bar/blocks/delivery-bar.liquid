{% comment %}
  Free Shipping Bar Block
  Settings are managed through the app panel and saved in metafields
{% endcomment %}

{% assign settings = shop.metafields.free_delivery_app.settings.value %}

<!-- Google Fonts Loading with preload for better performance -->
{% assign google_fonts = 'roboto,open-sans,lato,montserrat,poppins,source-sans,nunito,raleway' | split: ',' %}
{% if settings.font_family and google_fonts contains settings.font_family %}
  {% case settings.font_family %}
    {% when 'roboto' %}
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    {% when 'open-sans' %}
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    {% when 'lato' %}
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Lato:wght@300;400;700;900&display=swap" rel="stylesheet">
    {% when 'montserrat' %}
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    {% when 'poppins' %}
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    {% when 'source-sans' %}
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400;600;700;900&display=swap" rel="stylesheet">
    {% when 'nunito' %}
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    {% when 'raleway' %}
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
  {% endcase %}
{% endif %}
{% assign shadow_color = settings.shadow_color | default: '#000000' %}
<style>
  .free-delivery-bar {
    {% case settings.font_family %}
      {% when 'system' %}
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      {% when 'arial' %}
        font-family: Arial, sans-serif;
      {% when 'helvetica' %}
        font-family: Helvetica, Arial, sans-serif;
      {% when 'georgia' %}
        font-family: Georgia, serif;
      {% when 'times' %}
        font-family: "Times New Roman", Times, serif;
      {% when 'verdana' %}
        font-family: Verdana, Geneva, sans-serif;
      {% when 'trebuchet' %}
        font-family: "Trebuchet MS", Helvetica, sans-serif;
      {% when 'roboto' %}
        font-family: "Roboto", -apple-system, BlinkMacSystemFont, sans-serif;
      {% when 'open-sans' %}
        font-family: "Open Sans", -apple-system, BlinkMacSystemFont, sans-serif;
      {% when 'lato' %}
        font-family: "Lato", -apple-system, BlinkMacSystemFont, sans-serif;
      {% when 'montserrat' %}
        font-family: "Montserrat", -apple-system, BlinkMacSystemFont, sans-serif;
      {% when 'poppins' %}
        font-family: "Poppins", -apple-system, BlinkMacSystemFont, sans-serif;
      {% when 'source-sans' %}
        font-family: "Source Sans Pro", -apple-system, BlinkMacSystemFont, sans-serif;
      {% when 'nunito' %}
        font-family: "Nunito", -apple-system, BlinkMacSystemFont, sans-serif;
      {% when 'raleway' %}
        font-family: "Raleway", -apple-system, BlinkMacSystemFont, sans-serif;
      {% else %}
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    {% endcase %}
    text-align: center;
    height: {{ settings.bar_height | default: 40 }}px;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 3;
    transition: opacity 0.4s ease;
    left: 0;
    right: 0;
    box-sizing: border-box;
    font-display: swap;
    {% if settings.transparent_bg == true %}
      background-color: transparent;
    {% else %}
      background-color: {{ settings.background_color | default: '#000000' }};
    {% endif %}
    color: {{ settings.text_color | default: '#bbbbbb' }};
    font-size: {{ settings.font_size | default: 14 }}px;
    font-weight: {{ settings.font_weight | default: 600 }};
    border-radius: {{ settings.border_radius | default: 0 }}px;
    {% if settings.border_width and settings.border_width > 0 %}
      border: {{ settings.border_width }}px solid {{ settings.border_color | default: '#cccccc' }};
    {% else %}
      border: none;
    {% endif %}
    {% if settings.shadow_blur and settings.shadow_blur > 0 %}
      {% assign shadow_opacity = settings.shadow_opacity | default: 20 | divided_by: 100.0 %}
      {% assign shadow_distance = settings.shadow_distance | default: 2 %}
      {% assign shadow_blur = settings.shadow_blur | default: 4 %}
      box-shadow: 0 {{ shadow_distance }}px {{ shadow_blur }}px {{ shadow_color | color_modify: 'alpha', shadow_opacity }};
    {% else %}
      box-shadow: none;
    {% endif %}
    {% if settings.position == 'above-header' %}
      position: fixed !important;
      top: 0;
      left: 0;
      right: 0;
      left: 50%;
      transform: translateX(-50%);
      width: {% if settings.width and settings.width < 100 %}{{ settings.width }}vw{% else %}100vw{% endif %};
      z-index: 2147483647 !important;
      margin-top: 0 !important;
      max-width: 100vw;
      box-sizing: border-box;
    {% elsif settings.position == 'always-visible' %}
      position: fixed;
      z-index: 2;
      margin-top: {{ settings.margin_top }}px;
      left: 50%;
      transform: translateX(-50%);
      width: {% if settings.width and settings.width < 100 %}{{ settings.width }}vw{% else %}100vw{% endif %};
      max-width: 100vw;
    {% else %}
      position: absolute;
      z-index: 2 !important;
      margin-top: {{ settings.margin_top }}px;
      left: 50%;
      transform: translateX(-50%);
      width: {% if settings.width and settings.width < 100 %}{{ settings.width }}vw{% else %}100vw{% endif %};
      max-width: 100vw;
    {% endif %}
  }  /* Remove body padding for above-header position */
  {% if settings.position == 'above-header' %}
  html, body {
    transition: padding-top 0.3s cubic-bezier(0.4,0,0.2,1) !important;
  }
  /* PrzesuÅ„ wszystkie elementy fixed/top:0 (np. menu, header, popup) */

  {% else %}
  /* For fixed and absolute positions - set higher z-index for header and menu */
  header.header,
  .shopify-section header.header,
  #shopify-section-header header.header,
  body header.header,
  html header.header {
    z-index: 4 !important;
  }
  {% endif %}
  
  /* ðŸ”¥ OPACITY - TYLKO RAZ! */
  .free-delivery-bar:not(.fade-out) {
    {% assign opacity = settings.opacity | default: 100 | divided_by: 100.0 %}
    opacity: {{ opacity }};
  }

  .free-delivery-bar.fade-out {
    opacity: 0 !important;
  }
  
  .free-delivery-bar.hidden {
    display: none;
  }
  
  .free-delivery-bar button {
    background: none;
    border: none;
    color: inherit;
    position: absolute;
    top: 8px;
    right: 12px;
    cursor: pointer;
    font-size: 18px;
    padding: 0;
    opacity: 0.8;
    line-height: 1;
  }
  
  .free-delivery-bar button:hover {
    opacity: 1;
  }
  
  /* ZastÄ…p sekcjÄ™ CSS dla ikon: */
  .delivery-bar-content {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: {{ settings.icon_gap | default: 10 }}px;
    height: 100%; /* Dodaj tÄ™ liniÄ™ */
    transition: opacity 0.28s cubic-bezier(0.4,0,0.2,1);
    opacity: 1;
    will-change: opacity;
  }  /* Podstawowe style dla ikon */
  .delivery-icon {
    width: {{ settings.icon_size | default: 30 }}px !important;
    height: {{ settings.icon_size | default: 30 }}px !important;
    object-fit: contain !important;
    flex-shrink: 0 !important;
    display: block !important;
  }

  .banner__content {
    z-index: 1 !important;
  }
  .banner:after {
    z-index: 0 !important;
  }

  /* Animacja wygaszania i pojawiania siÄ™ caÅ‚ej zawartoÅ›ci paska */
  .delivery-bar-content {
    transition: opacity 0.28s cubic-bezier(0.4,0,0.2,1);
    opacity: 1;
    will-change: opacity;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: {{ settings.icon_gap | default: 10 }}px;
    height: 100%; /* Dodaj tÄ™ liniÄ™ */
  }
  .delivery-bar-content-fade-out {
    opacity: 0;
    transition: opacity 0.22s cubic-bezier(0.4,0,0.2,1);
  }
  .delivery-bar-content-fade-in {
    opacity: 1;
    transition: opacity 0.28s cubic-bezier(0.4,0,0.2,1);
  }
  .delivery-bar-content-no-anim {
    transition: none !important;
  }
</style>

<div class="free-delivery-bar" 
     id="free-delivery-bar"
     data-threshold="{{ settings.min_amount | default: 199 }}"
     data-general-message="{{ settings.general_message | default: 'Free delivery available!' }}"
     data-show-progress="{% if settings.show_progress_message == false %}false{% else %}true{% endif %}"
     data-progress-message="{{ settings.progress_message | default: 'Add $[remaining] more for free delivery!' }}"
     data-success-message="{{ settings.success_message | default: 'Congratulations! You have free delivery!' }}"
     data-show-success="{% if settings.show_success_message == false %}false{% else %}true{% endif %}"
     data-hide-bar-after-threshold="{% if settings.show_success_message == true %}false{% elsif settings.hide_bar_after_threshold == true %}true{% else %}false{% endif %}"
     data-show-timer="{% if settings.show_timer == true %}true{% else %}false{% endif %}"
     data-timer-limit="{{ settings.timer_limit | default: 24 }}"
     data-timer-start="{{ settings.timer_start_time | default: '' }}"
     data-excluded-countries="{{ settings.excluded_countries | default: '' }}"
     data-position="{{ settings.position | default: 'above-header' }}"
     data-bg-color="{{ settings.background_color | default: '#4CAF50' }}"
     data-width="{{ settings.width | default: 90 }}"
     data-margin-top="{{ settings.margin_top | default: 20 }}"
     data-bar-height="{{ settings.bar_height | default: 40 }}"
     data-icon-size="{{ settings.icon_size | default: 20 }}"
     data-transparent-bg="{% if settings.transparent_bg == true %}true{% else %}false{% endif %}"
     data-currency-mode="{{ settings.currency_mode | default: 'shop' }}"
     data-shop-currency="{{ shop.currency | default: 'USD' }}"
>
  <div class="delivery-bar-content delivery-bar-content-no-anim">
    {% if settings.show_icon %}
      <img class="delivery-icon" 
           src="{{ settings.icon_image }}" 
           alt="Delivery" />
    {% endif %}
    
    <span id="delivery-message" class="delivery-message">
      {% assign message = settings.message | default: "Free delivery on orders over $199!" %}
      {{ message }}
    </span>
  </div>
  {% if settings.closeable != false %}
    <button id="close-delivery-bar">Ã—</button>
  {% endif %}
  
  <!-- Debug: sprawdÅº wartoÅ›Ä‡ closeable -->
  <!-- settings.closeable = {{ settings.closeable }} -->
</div>

<script>
document.addEventListener("DOMContentLoaded", function () {
    const barHeight = {{ settings.bar_height | default: 40 }};
    const bar = document.querySelector('.free-delivery-bar');
    if (!bar) return;

    const showTimer = bar.getAttribute('data-show-timer') === 'true';

    document.body.appendChild(bar);

    const header = document.querySelector('header');
    const deliveryMessageEl = document.getElementById('delivery-message');
    // Helper for formatting timer string
    function getInitialTimerString() {
      const timerLimit = parseInt(bar.getAttribute('data-timer-limit')) || 24;
      const timerStart = bar.getAttribute('data-timer-start');
      let startTime = null;
      if (timerStart && !isNaN(Date.parse(timerStart))) {
        startTime = Date.parse(timerStart);
      } else if (timerStart && !isNaN(Number(timerStart))) {
        startTime = Number(timerStart);
      }
      if (!startTime) return '00:00:00';
      const timerEndTime = startTime + (timerLimit * 60 * 60 * 1000);
      const now = new Date().getTime();
      const timeLeft = timerEndTime - now;
      if (timeLeft <= 0) return '00:00:00';
      const hours = Math.floor(timeLeft / (1000 * 60 * 60));
      const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
      return [hours, minutes, seconds].map(unit => unit.toString().padStart(2, '0')).join(':');
    }
    if (showTimer && deliveryMessageEl && deliveryMessageEl.textContent.includes('{timer}')) {
      deliveryMessageEl.textContent = deliveryMessageEl.textContent.replace(/{timer}/g, getInitialTimerString());
    }

    const savedBarState = localStorage.getItem('deliveryBarState');
    const deliveryBarClosed = localStorage.getItem('deliveryBarClosed') === 'true';
    const isBarHidden = bar.classList.contains('hidden') || savedBarState === 'hidden' || deliveryBarClosed;

    function updateShiftedElements() {
      const bar = document.querySelector('.free-delivery-bar');
      const barHeight = {{ settings.bar_height | default: 40 }};
      const isBarVisible = bar && !bar.classList.contains('hidden');
      document.querySelectorAll('[data-shifted-by-bar="true"]').forEach(function(el) {
        if (isBarVisible) {
          el.style.top = barHeight + 'px';
          el.style.maxHeight = 'calc(100vh - ' + barHeight + 'px)';
        } else {
          el.style.top = '0px';
          el.style.maxHeight = '100vh';
        }
      });
    }



    if ("{{ settings.position | default: 'above-header' }}" === "above-header") {
      function shiftFixedElements() {
        if (window.freeDeliveryBarHiding) return;
        const selector = [
          '[class*="drawer"]',
          '[class*="menu"]',
          '[class*="header"]',
          '[class*="popup"]',
          '[class*="cart"]',
          '[id*="drawer"]',
          '[id*="menu"]',
          '[id*="header"]',
          '[id*="popup"]',
          '[id*="cart"]'
        ].join(',');

        document.querySelectorAll(selector).forEach(function(el) {
          if (
            el !== bar &&
            window.getComputedStyle(el).position === 'fixed' &&
            parseInt(window.getComputedStyle(el).top) === 0
          ) {
            el.setAttribute('data-shifted-by-bar', 'true');
            if (!bar.classList.contains('hidden')) {
              el.style.top = barHeight + 'px';
              el.style.maxHeight = 'calc(100vh - ' + barHeight + 'px)';
            } else {
              el.style.top = '0px';
              el.style.maxHeight = '100vh';
            }
          }
        });
      }
      shiftFixedElements();

      const observer = new MutationObserver(function(mutations) {
        let needsShift = false;
        mutations.forEach(function(mutation) {
          if (mutation.type === 'childList') {
            mutation.addedNodes.forEach(function(node) {
              if (node.nodeType === 1) needsShift = true;
            });
          }
          if (mutation.type === 'attributes' && (mutation.attributeName === 'class' || mutation.attributeName === 'style')) {
            needsShift = true;
          }
        });
        if (!window.freeDeliveryBarHiding && needsShift) shiftFixedElements();
      });
      observer.observe(document.body, { childList: true, subtree: true, attributes: true, attributeFilter: ['class', 'style'] });

      document.addEventListener('click', function() {
        setTimeout(shiftFixedElements, 0);
      });

      window.addEventListener('resize', function() {
        setTimeout(shiftFixedElements, 0);
      });
    }
});

let lastMessageType = null;
let lastTimerMessage = null;
const useCustomerCurrency = {{ settings.use_customer_currency | default: false | json }};
const shopCurrency = '{{ settings.shop_currency | default: shop.currency | escape }}';
const exchangeRates = {{ settings.exchange_rates | default: null | json }};

function getCustomerCurrency() {
  if (window.userCurrency && typeof window.userCurrency === 'string') return window.userCurrency;

  if (window.detectedCurrency && typeof window.detectedCurrency === 'string') return window.detectedCurrency;

  const lsCurrency = localStorage.getItem('userCurrency');
  if (lsCurrency && typeof lsCurrency === 'string') return lsCurrency;

  const ipapiCurrency = localStorage.getItem('userCurrencyFromIpapi');
  if (ipapiCurrency && typeof ipapiCurrency === 'string') return ipapiCurrency;

  if (!localStorage.getItem('userCurrencyIpapiChecked')) {
    fetch('https://ipapi.co/json/')
      .then(resp => resp.json())
      .then(data => {
        if (data && data.currency) {
          localStorage.setItem('userCurrencyFromIpapi', data.currency);
          localStorage.setItem('userCurrencyIpapiChecked', '1');
          window.location.reload();
        }
      })
      .catch(() => {
        localStorage.setItem('userCurrencyIpapiChecked', '1');
      });
  }

  return shopCurrency;
}

(function() {
  if (window.freeDeliveryBarInitialized) {
    return;
  }
  window.freeDeliveryBarInitialized = true;

  const deliveryBar = document.getElementById('free-delivery-bar');
  const messageElement = document.getElementById('delivery-message');
  const closeButton = document.getElementById('close-delivery-bar');
  const deliveryBarContent = document.querySelector('.delivery-bar-content');
  
  const showTimer = deliveryBar.getAttribute('data-show-timer') === 'true';

  if (!deliveryBar) {
    return;
  }
  
  const savedMessage = localStorage.getItem('deliveryBarMessage');
  const savedBarState = localStorage.getItem('deliveryBarState');

  if (savedMessage && (savedMessage.includes('<img') || savedMessage.includes('delivery-icon'))) {
    localStorage.removeItem('deliveryBarMessage');
  } else if (savedMessage) {
    messageElement.textContent = savedMessage;
  }

  if (savedBarState === 'hidden') {
    deliveryBar.classList.add('hidden');
  } else if (savedBarState === 'visible') {
    deliveryBar.classList.remove('hidden');
  }
  const threshold = parseInt(deliveryBar.getAttribute('data-threshold'));
  const generalMessage = deliveryBar.getAttribute('data-general-message');
  const showProgress = deliveryBar.getAttribute('data-show-progress') === 'true';  const progressMessage = deliveryBar.getAttribute('data-progress-message');
  const successMessage = deliveryBar.getAttribute('data-success-message');  const showSuccess = deliveryBar.getAttribute('data-show-success') === 'true';
  let hideBarAfterThreshold = deliveryBar.getAttribute('data-hide-bar-after-threshold') === 'true';
  if (showSuccess) {
    hideBarAfterThreshold = false;
  }
  const timerLimit = parseInt(deliveryBar.getAttribute('data-timer-limit')) || 24;
  const timerStart = deliveryBar.getAttribute('data-timer-start');
  const excludedCountries = deliveryBar.getAttribute('data-excluded-countries') || '';
  const position = deliveryBar.getAttribute('data-position') || 'above-header';
  const bgColor = deliveryBar.getAttribute('data-bg-color');
  const width = parseInt(deliveryBar.getAttribute('data-width')) || 90;  const marginTop = parseInt(deliveryBar.getAttribute('data-margin-top'));
  const barHeight = parseInt(deliveryBar.getAttribute('data-bar-height')) || 40;
  const transparentBg = deliveryBar.getAttribute('data-transparent-bg') === 'true';  
  // Check if current country is excluded
  async function checkCountryExclusion() {
    if (!excludedCountries || excludedCountries.trim() === '') {
      return false; // No exclusions, show everywhere
    }
    
    try {
      // Check localStorage first to avoid repeated API calls
      const cachedCountry = localStorage.getItem('userCountryCode');
      const cacheTime = localStorage.getItem('userCountryCacheTime');
      const currentTime = new Date().getTime();
      const cacheExpiry = 24 * 60 * 60 * 1000; // 24 hours
      
      let userCountry = null;
      
      if (cachedCountry && cacheTime && (currentTime - parseInt(cacheTime)) < cacheExpiry) {
        userCountry = cachedCountry;
      } else {
        // Fetch country from API
        const response = await fetch('https://ipapi.co/json/');
        const data = await response.json();
        
        userCountry = data.country;
        
        // Cache the result
        localStorage.setItem('userCountryCode', userCountry);
        localStorage.setItem('userCountryCacheTime', currentTime.toString());
      }
      
      if (!userCountry) {
        return false; // If we can't detect country, show the bar
      }
      
      // Parse excluded countries (comma-separated, case-insensitive)
      const excludedList = excludedCountries
        .split(',')
        .map(country => country.trim().toUpperCase())
        .filter(country => country.length > 0);
      
      const isExcluded = excludedList.includes(userCountry.toUpperCase());
      
      return isExcluded;
      
    } catch (error) {
      return false;
    }
  }
  
  // Initialize the bar with country check
  async function initializeBar() {

    const isCountryExcluded = await checkCountryExclusion();
    if (isCountryExcluded) {
      deliveryBar.style.display = 'none';
      if (position === 'above-header') {
        document.body.style.paddingTop = '0px';
        document.documentElement.style.paddingTop = '0px';
      }
      return;
    }
    if (localStorage.getItem('deliveryBarClosed') === 'true') {
      deliveryBar.classList.add('hidden');
      if (position === 'above-header') {
        const header = document.querySelector('header');
        if (header) header.style.paddingTop = '0px';
        document.querySelectorAll('[data-shifted-by-bar="true"]').forEach(function(el) {
          el.style.setProperty('top', '0', 'important');
          el.style.setProperty('max-height', '100vh');
        });
      }
      return;
    }

    if (position === 'above-header') {
      const header = document.querySelector('header');
      if (header) {
        header.style.transition = '';
        setTimeout(() => {
          if (deliveryBar.classList.contains('hidden')) {
            header.style.paddingTop = '0px';
          } else {
            header.style.paddingTop = barHeight + 'px';
          }
        }, 10);
      }
    }
    
    let isBarVisible = !deliveryBar.classList.contains('hidden');
    let isUpdatingDeliveryMessage = false;

    // Timer functionality
    let timerInterval = null;
    let timerEndTime = null;

    if (showTimer && messageElement && messageElement.textContent.includes('{timer}')) {
      lastTimerMessage = messageElement.textContent;
      messageElement.textContent = replaceTimerInMessage(lastTimerMessage);
    }

    function initTimer() {
      if (!showTimer) return;

      let startTime = null;
      if (timerStart && !isNaN(Date.parse(timerStart))) {
        startTime = Date.parse(timerStart);
      } else if (timerStart && !isNaN(Number(timerStart))) {
        startTime = Number(timerStart);
      } else {
        return;
      }
      timerEndTime = startTime + (timerLimit * 60 * 60 * 1000); // ms

      startTimer();
    }

    function startTimer() {
      if (!showTimer || !timerEndTime) return;
      if (timerInterval) clearInterval(timerInterval);
      // --- update message immediately before starting interval ---
      updateTimerDisplayAndMessage(true);
      timerInterval = setInterval(updateTimerDisplayAndMessage, 1000);
    }

    function updateTimerDisplay() {
      if (!showTimer || !timerEndTime) return;
      const now = new Date().getTime();
      const timeLeft = timerEndTime - now;

      if (timeLeft <= 0) {
        clearInterval(timerInterval);
        return '00:00:00';
      }
      const hours = Math.floor(timeLeft / (1000 * 60 * 60));
      const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
      const formattedTime = [hours, minutes, seconds]
        .map(unit => unit.toString().padStart(2, '0'))
        .join(':');
      return formattedTime;
    }

    function replaceTimerInMessage(message) {
      if (!showTimer) return message;
      const timerString = updateTimerDisplay();
      return message.replace(/{timer}/g, timerString);
    }

    function updateTimerDisplayAndMessage(forceImmediate) {
      if (showTimer && lastTimerMessage && lastTimerMessage.includes('{timer}')) {
        if (messageElement) {
          // Only update if value is different or if forced
          const newText = replaceTimerInMessage(lastTimerMessage);
          if (forceImmediate || messageElement.textContent !== newText) {
            messageElement.textContent = newText;
          }
        }
      }
    }

    function replaceAmountPlaceholders(message, remaining, threshold) {
      let targetCurrency = shopCurrency;
      let remainingConv = remaining;
      let thresholdConv = threshold;
      if (useCustomerCurrency && exchangeRates) {
        targetCurrency = getCustomerCurrency();
        if (targetCurrency !== shopCurrency && exchangeRates[targetCurrency]) {
          remainingConv = convertAmount(remaining, targetCurrency);
          thresholdConv = convertAmount(threshold, targetCurrency);
        }
      }
      const formattedRemaining = formatCurrency(remainingConv, targetCurrency);
      const formattedThreshold = formatCurrency(thresholdConv, targetCurrency);
      return message
        .replace(/\[remaining\]/g, formattedRemaining)
        .replace(/{remaining}/g, formattedRemaining)
        .replace(/{amount}/g, formattedThreshold);
    }

    // Update delivery message based on cart value
    function updateDeliveryMessage(options = {}) {
      if (isUpdatingDeliveryMessage) return;
      isUpdatingDeliveryMessage = true;

      fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {
          const cartTotal = cart.total_price / 100;
          const remaining = threshold - cartTotal;

          let messageType = 'general';
          if (cartTotal >= threshold && showSuccess) {
            messageType = 'success';
          } else if (cartTotal >= threshold && !showSuccess && hideBarAfterThreshold) {
            messageType = 'hidden';
          } else if (cartTotal > 0 && showProgress) {
            messageType = 'progress';
          }

          let animate = lastMessageType !== null && lastMessageType !== messageType;
          if (options.skipAnimation) animate = false;

          lastMessageType = messageType;

          let finalMessage = generalMessage;
          
          if (cartTotal >= threshold && hideBarAfterThreshold && !showSuccess) {
            if (!deliveryBar.classList.contains('hidden')) {
              fadeOutBar(() => {
                localStorage.setItem('deliveryBarState', 'hidden');
                isBarVisible = false;
              });
              localStorage.setItem('deliveryBarMessage', 'Hidden - threshold reached');
              isUpdatingDeliveryMessage = false;
              return;
            } else {
              isUpdatingDeliveryMessage = false;
              return;
            }
          } else if (cartTotal < threshold && hideBarAfterThreshold) {
            if (deliveryBar.classList.contains('hidden')) {
              fadeInBar();
              localStorage.setItem('deliveryBarState', 'visible');
              isBarVisible = true;
            }
          }

          if (cartTotal >= threshold) {
            if (showSuccess) {
              finalMessage = successMessage && successMessage.trim() !== '' ? successMessage : 'ðŸŽ‰ You have free delivery!';
              finalMessage = replaceAmountPlaceholders(finalMessage, 0, threshold);
            } else {
              finalMessage = replaceAmountPlaceholders(generalMessage, remaining, threshold);
            }
          } else {
            if (cartTotal === 0) {
              finalMessage = replaceAmountPlaceholders(generalMessage, remaining, threshold);
            } else if (showProgress) {
              finalMessage = replaceAmountPlaceholders(progressMessage, remaining, threshold);
            } else {
              finalMessage = replaceAmountPlaceholders(generalMessage, remaining, threshold);
            }
          }

          lastTimerMessage = finalMessage;
          setMessageWithFade(replaceTimerInMessage(lastTimerMessage), animate);

          localStorage.setItem('deliveryBarMessage', finalMessage);
        })
        .catch((error) => {
          let message = generalMessage || 'Free delivery available!';
          setMessageWithFade(message, false);
          lastTimerMessage = message;
        })
        .finally(() => {
          isUpdatingDeliveryMessage = false;
        });
    }

    function setMessageWithFade(newText, animate = false) {
      if (!deliveryBarContent || !messageElement) return;
      if (messageElement.textContent === newText) return;

      if (!animate) {
        messageElement.textContent = newText;
        deliveryBarContent.classList.remove('delivery-bar-content-fade-in');
        deliveryBarContent.classList.remove('delivery-bar-content-fade-out');
        return;
      }

      deliveryBarContent.classList.remove('delivery-bar-content-fade-in');
      deliveryBarContent.classList.add('delivery-bar-content-fade-out');

      setTimeout(() => {
        messageElement.textContent = newText;
        deliveryBarContent.classList.remove('delivery-bar-content-fade-out');
        deliveryBarContent.classList.add('delivery-bar-content-fade-in');
        setTimeout(() => {
          deliveryBarContent.classList.remove('delivery-bar-content-fade-in');
        }, 280);
      }, 220);
    }

    function fadeOutBar(callback, animateHeader = false) {
      if (position === 'above-header') {
        window.freeDeliveryBarHiding = true;
        document.body.style.transition = '';
        document.body.style.paddingTop = '0px';
        document.documentElement.style.transition = '';
        document.documentElement.style.paddingTop = '0px';
        const header = document.querySelector('header');
        if (header) {
          header.style.paddingTop = '0px';
        }
        document.querySelectorAll('[data-shifted-by-bar="true"]').forEach(function(el) {
          el.style.top = '0px';
          el.style.maxHeight = '100vh';
        });
      }
      deliveryBar.classList.add('fade-out');
      setTimeout(() => {
        deliveryBar.classList.add('hidden');
        deliveryBar.classList.remove('fade-out');
        window.freeDeliveryBarHiding = false;
        if (callback) callback();
      }, 1000);
    }

    function fadeInBar(animateHeader = false) {
      deliveryBar.classList.add('fade-out');
      deliveryBar.classList.remove('hidden');
      if (position === 'above-header') {
        if (window.shiftFixedElementsIfBarVisible) {
          window.shiftFixedElementsIfBarVisible();
        }
        const header = document.querySelector('header');
        if (header) {
          header.style.paddingTop = barHeight + 'px';
        }
      }
      deliveryBar.offsetHeight;
      setTimeout(() => {
        deliveryBar.classList.remove('fade-out');
      }, 10);
    }

    window.updateShiftedElements = function() {
      const bar = document.querySelector('.free-delivery-bar');
      const barHeight = {{ settings.bar_height | default: 40 }};
      const isBarVisible = bar && !bar.classList.contains('hidden');
      const selector = [
        '[data-shifted-by-bar="true"]'
      ].join(',');

      document.querySelectorAll(selector).forEach(function(el) {
        if (isBarVisible) {
          el.style.top = barHeight + 'px';
          el.style.maxHeight = 'calc(100vh - ' + barHeight + 'px)';
        } else {
          el.style.top = '0px';
          el.style.maxHeight = '100vh';
        }
      });
    };

    if ("{{ settings.position | default: 'above-header' }}" === "above-header") {
      updateShiftedElements();
    }

   

    if (closeButton) {
      closeButton.addEventListener('click', function() {
        if (position === 'above-header') {
          document.documentElement.style.transition = '';
          document.documentElement.style.paddingTop = '0px';
        }
        deliveryBar.classList.add('hidden');
        localStorage.setItem('deliveryBarClosed', 'true');
      });
    }

    // === CART EVENT LISTENERS ===
    
    const cartEvents = [
      'cart:updated',
      'cart:changed', 
      'cart:refresh',
      'cartChanged',
      'ajaxCart:updated',
      'cart:build',
      'cart:requestComplete',
      'product:added-to-cart',
      'cart:item-added',
      'cart:item-removed',
      'cart:item-updated',
      'cart:cleared'
    ];

    cartEvents.forEach(eventName => {
      document.addEventListener(eventName, function(event) {
        setTimeout(() => updateDeliveryMessage(), 100);
      });
    });

    window.addEventListener('cart:updated', function(event) {
      setTimeout(() => updateDeliveryMessage(), 100);
    });

    const themeEvents = [
      'theme:cart:change',
      'theme:cart:updated', 
      'cart-drawer:open',
      'cart-drawer:close',
      'mini-cart:open',
      'mini-cart:close',
      'variant:add',
      'variant:remove'
    ];

    themeEvents.forEach(eventName => {
      document.addEventListener(eventName, function(event) {
        setTimeout(() => updateDeliveryMessage(), 100);
      });
    });

    window.addEventListener('freeDeliveryBar:update', function() {
      updateDeliveryMessage();
    });

    const originalFetch = window.fetch;
    window.fetch = function(...args) {
      const promise = originalFetch.apply(this, args);
      
      const url = args[0];
      const isCartRequest = typeof url === 'string' && (
        url.includes('/cart/add') || 
        url.includes('/cart/update') || 
        url.includes('/cart/change') ||
        url.includes('/cart/clear') ||
        url.includes('/cart/') ||
        url.endsWith('/cart')
      );
      
      const isCartJsRequest = typeof url === 'string' && url.includes('/cart.js');
      
      if (isCartRequest && !isCartJsRequest) {
        promise.then((response) => {
          if (response.ok) {
            setTimeout(() => updateDeliveryMessage(), 150);
          }
        }).catch(() => {
        });
      }
      
      return promise;
    };

    const originalXHROpen = XMLHttpRequest.prototype.open;
    const originalXHRSend = XMLHttpRequest.prototype.send;

    XMLHttpRequest.prototype.open = function(method, url, ...args) {
      this._url = url;
      return originalXHROpen.call(this, method, url, ...args);
    };

    XMLHttpRequest.prototype.send = function(...args) {
      const xhr = this;
      
      const isCartRequest = this._url && (
        this._url.includes('/cart/add') ||
        this._url.includes('/cart/update') ||
        this._url.includes('/cart/change') ||
        this._url.includes('/cart/clear') ||
        this._url.includes('/cart.js') ||
        this._url.includes('/cart/')
      );

      if (isCartRequest) {
        xhr.addEventListener('readystatechange', function() {
          if (xhr.readyState === 4 && xhr.status >= 200 && xhr.status < 300) {
            setTimeout(() => updateDeliveryMessage(), 150);
          }
        });
      }

      return originalXHRSend.call(this, ...args);
    };

    document.addEventListener('submit', function(event) {
      const form = event.target;
      if (form && form.action && (
        form.action.includes('/cart/add') ||
        form.action.includes('/cart/update') ||
        form.action.includes('/cart') ||
        form.querySelector('input[name="id"]')
      )) {
        setTimeout(() => updateDeliveryMessage(), 200);
      }
    });

    document.addEventListener('click', function(event) {
      const target = event.target;
      const button = target.closest('button');
      
      if (button && (
        button.type === 'submit' ||
        button.classList.contains('btn-cart') ||
        button.classList.contains('add-to-cart') ||
        button.classList.contains('cart-item__remove') ||
        button.classList.contains('quantity__button') ||
        button.name === 'add' ||
        button.name === 'update' ||
        button.getAttribute('data-action') === 'add-to-cart'
      )) {
        setTimeout(() => updateDeliveryMessage(), 300);
      }
    });

    // MutationObserver for cart drawer/popup changes
    const observer = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        if (mutation.type === 'childList') {
          const cartSelectors = [
            '.cart-drawer',
            '.cart-popup',
            '.mini-cart',
            '.cart-items',
            '.cart-item',
            '[id*="cart"]',
            '[class*="cart"]'
          ];
          
          cartSelectors.forEach(selector => {
            if (mutation.target.matches && mutation.target.matches(selector)) {
              setTimeout(() => updateDeliveryMessage(), 100);
            }
          });
        }
      });
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true,
      attributes: false
    });


    function fallbackCartCheck() {
      fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {
          const currentTotal = cart.total_price / 100;
          // Only update if value changed or message type changed
          let messageType = 'general';
          if (currentTotal >= threshold && showSuccess) {
            messageType = 'success';
          } else if (currentTotal >= threshold && !showSuccess && hideBarAfterThreshold) {
            messageType = 'hidden';
          } else if (currentTotal > 0 && showProgress) {
            messageType = 'progress';
          }
          if (currentTotal !== lastCartTotal || messageType !== lastMessageType) {
            updateDeliveryMessage({ skipAnimation: false });
          } else {
            updateDeliveryMessage({ skipAnimation: true });
          }
        })
        .catch(() => {
          
        });
    }

    setInterval(fallbackCartCheck, 10000);

    
    if (savedBarState === 'hidden' && position === 'above-header') {
      document.body.style.transition = '';
      document.body.style.paddingTop = '0px';
      document.documentElement.style.transition = '';
      document.documentElement.style.paddingTop = '0px';
    }
    
    if (showTimer) {
      initTimer();
    }

    setTimeout(() => {
      updateDeliveryMessage({ skipAnimation: true });
    }, 100);
  }
  
  initializeBar();
  
  const currencyLocaleMap = {
    USD: 'en-US',
    EUR: 'de-DE',
    PLN: 'pl-PL',
    GBP: 'en-GB',
    JPY: 'ja-JP',
    AUD: 'en-AU',
    CAD: 'en-CA',
    CHF: 'de-CH',
    SEK: 'sv-SE',
    NOK: 'nb-NO',
    DKK: 'da-DK',
    CZK: 'cs-CZ',
    HUF: 'hu-HU',
    CNY: 'zh-CN',
    HKD: 'zh-HK',
    SGD: 'en-SG',
    NZD: 'en-NZ',
    ZAR: 'en-ZA',
    MXN: 'es-MX',
    BRL: 'pt-BR',
    RUB: 'ru-RU',
    TRY: 'tr-TR',
    INR: 'en-IN',
    KRW: 'ko-KR',
    THB: 'th-TH',
    MYR: 'ms-MY',
    IDR: 'id-ID',
    PHP: 'en-PH',
    TWD: 'zh-TW',
    SAR: 'ar-SA',
    AED: 'ar-AE',
    ILS: 'he-IL'
  };


  function convertAmount(amount, targetCurrency) {
    if (!useCustomerCurrency || !exchangeRates || !targetCurrency || targetCurrency === shopCurrency) return amount;
    const rate = exchangeRates[targetCurrency];
    if (!rate) return amount;
    return amount * rate;
  }

  function formatCurrency(amount, currencyOverride) {
    let currency = currencyOverride || shopCurrency;
    const mappedLocale = currencyLocaleMap[currency] || 'en';
    let roundedAmount = Math.round((amount + Number.EPSILON) * 100) / 100;
    const isInt = Number.isInteger(roundedAmount) || (typeof roundedAmount === 'number' && Math.floor(roundedAmount) === roundedAmount);
    try {
      return new Intl.NumberFormat(mappedLocale, {
        style: 'currency',
        currency: currency,
        minimumFractionDigits: isInt ? 0 : 2,
      }).format(roundedAmount);
    } catch (e) {
      return currency + ' ' + roundedAmount;
    }
  }
})();

</script>

{% schema %}
{
  "name": "Free Shipping Bar",
  "target": "body",
  "settings": [
    {
      "type": "paragraph",
      "content": "All settings (message, colors, position, styles) are managed through the app panel. This block automatically fetches settings from the app."
    },
    {
      "type": "paragraph", 
      "content": "To configure the bar, go to: Apps â†’ Free Shipping Bar â†’ Configuration"
    }
  ]
}
{% endschema %}