{% comment %}
  Free Delivery Bar Block
  Settings are managed through the app panel and saved in metafields
{% endcomment %}

{% assign settings = shop.metafields.free_delivery_app.settings.value %}

<!-- Google Fonts Loading -->
{% if settings.font_family and settings.font_family != 'system' %}
  {% case settings.font_family %}
    {% when 'roboto' %}
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;600;700;900&display=swap" rel="stylesheet">
    {% when 'open-sans' %}
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700;800&display=swap" rel="stylesheet">
    {% when 'lato' %}
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Lato:wght@400;700;900&display=swap" rel="stylesheet">
    {% when 'montserrat' %}
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700;800;900&display=swap" rel="stylesheet">
    {% when 'poppins' %}
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700;800;900&display=swap" rel="stylesheet">
    {% when 'source-sans' %}
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;600;700;900&display=swap" rel="stylesheet">
    {% when 'nunito' %}
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700;800;900&display=swap" rel="stylesheet">
    {% when 'raleway' %}
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;600;700;800;900&display=swap" rel="stylesheet">
  {% endcase %}
{% endif %}

<style>
  .free-delivery-bar {
    {% case settings.font_family %}
      {% when 'system' %}
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      {% when 'arial' %}
        font-family: Arial, sans-serif;
      {% when 'helvetica' %}
        font-family: Helvetica, Arial, sans-serif;
      {% when 'georgia' %}
        font-family: Georgia, serif;
      {% when 'times' %}
        font-family: "Times New Roman", Times, serif;
      {% when 'verdana' %}
        font-family: Verdana, Geneva, sans-serif;
      {% when 'trebuchet' %}
        font-family: "Trebuchet MS", Helvetica, sans-serif;
      {% when 'roboto' %}
        font-family: "Roboto", sans-serif;
      {% when 'open-sans' %}
        font-family: "Open Sans", sans-serif;
      {% when 'lato' %}
        font-family: "Lato", sans-serif;
      {% when 'montserrat' %}
        font-family: "Montserrat", sans-serif;
      {% when 'poppins' %}
        font-family: "Poppins", sans-serif;
      {% when 'source-sans' %}
        font-family: "Source Sans Pro", sans-serif;
      {% when 'nunito' %}
        font-family: "Nunito", sans-serif;
      {% when 'raleway' %}
        font-family: "Raleway", sans-serif;
      {% else %}
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    {% endcase %}
    text-align: center;
    height: {{ settings.bar_height | default: 40 }}px;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 3;
    transition: opacity 0.4s ease;
    left: 50%;
    transform: translateX(-50%);
      /* TŁO - przezroczyste lub kolorowe */
    {% if settings.transparent_bg == true %}
      background-color: transparent;
    {% else %}
      background-color: {{ settings.background_color | default: '#000000' }};
    {% endif %}
    
    /* Pozostałe style */
    color: {{ settings.text_color | default: '#bbbbbb' }};
    font-size: {{ settings.font_size | default: 14 }}px;
    font-weight: {{ settings.font_weight | default: 600 }};
    border-radius: {{ settings.border_radius | default: 0 }}px;
    
    /* Ramka */
    {% if settings.border_width and settings.border_width > 0 %}
      border: {{ settings.border_width }}px solid {{ settings.border_color | default: '#cccccc' }};
    {% else %}
      border: none;
    {% endif %}
    
    /* Cień */
    {% if settings.shadow_blur and settings.shadow_blur > 0 %}
      {% assign shadow_opacity = settings.shadow_opacity | default: 20 | divided_by: 100.0 %}
      {% assign shadow_distance = settings.shadow_distance | default: 2 %}
      {% assign shadow_blur = settings.shadow_blur | default: 4 %}
      box-shadow: 0 {{ shadow_distance }}px {{ shadow_blur }}px rgba(0, 0, 0, {{ shadow_opacity }});
    {% else %}
      box-shadow: none;
    {% endif %}    {% if settings.position == 'above-header' %}
      position: fixed;
      width: 100% !important;
      z-index: 3;
      top: 0;
      margin-top: 0;
    {% elsif settings.position == 'fixed' %}
      position: fixed;
      width: 100% !important;
      z-index: 3;
      margin-top: 0;
    {% else %}
      position: absolute;
      z-index: 2;
      margin-top: {{ settings.margin_top }}px;
      left: 50%;
      transform: translateX(-50%);
    {% endif %}  }  /* Remove body padding for above-header position */
  {% if settings.position == 'above-header' %}
  header.header {
    padding-top: {{ settings.bar_height | default: 40 }}px !important;
    transition: padding-top 0.3s ease !important;
  }

  /* Force higher specificity to override theme styles */
  .shopify-section header.header,
  #shopify-section-header header.header,
  body header.header,
  html header.header {
    padding-top: {{ settings.bar_height | default: 40 }}px !important;
    transition: padding-top 0.3s ease !important;
  }
  
  /* Emergency override for when bar is hidden - INSTANT */
  header.header.delivery-bar-hidden {
    padding-top: 0px !important;
    transition: none !important;
  }
  
  /* Animated hiding when bar fades out */
  header.header.delivery-bar-hiding {
    padding-top: 0px !important;
    transition: padding-top 1s ease !important;
  }
  {% else %}
  /* For fixed and absolute positions - set higher z-index for header and menu */
  header.header,
  .shopify-section header.header,
  #shopify-section-header header.header,
  body header.header,
  html header.header {
    z-index: 4 !important;
  }
  
  /* Menu drawer z-index */
  .menu-drawer,
  .menu-drawer__inner-container,
  .menu-drawer__navigation-container,
  .menu-drawer__navigation,
  .menu-drawer__utility-links,
  .menu-drawer-container menu-opening{
    z-index: 4 !important;
  }
  {% endif %}
  
  /* 🔥 OPACITY - TYLKO RAZ! */
  .free-delivery-bar:not(.fade-out) {
    {% assign opacity = settings.opacity | default: 100 | divided_by: 100.0 %}
    opacity: {{ opacity }};
  }

  .free-delivery-bar.fade-out {
    opacity: 0 !important;
  }
  
  .free-delivery-bar.hidden {
    display: none;
  }
  
  .free-delivery-bar button {
    background: none;
    border: none;
    color: inherit;
    position: absolute;
    top: 8px;
    right: 12px;
    cursor: pointer;
    font-size: 18px;
    padding: 0;
    opacity: 0.8;
    line-height: 1;
  }
  
  .free-delivery-bar button:hover {
    opacity: 1;
  }
  
  /* Zastąp sekcję CSS dla ikon: */
  .delivery-bar-content {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: {{ settings.icon_gap | default: 10 }}px;
    height: 100%; /* Dodaj tę linię */
  }  /* Podstawowe style dla ikon */
  .delivery-icon {
    width: {{ settings.icon_size | default: 30 }}px !important;
    height: {{ settings.icon_size | default: 30 }}px !important;
    object-fit: contain !important;
    flex-shrink: 0 !important;
    display: block !important;
  }
</style>

<div class="free-delivery-bar" 
     id="free-delivery-bar"
     data-threshold="{{ settings.min_amount | default: 199 }}"     data-general-message="{{ settings.general_message | default: 'Free delivery available!' }}"     data-show-progress="{% if settings.show_progress_message == false %}false{% else %}true{% endif %}"
     data-progress-message="{{ settings.progress_message | default: 'Add $[remaining] more for free delivery!' }}"
     data-success-message="{{ settings.success_message | default: 'Congratulations! You have free delivery!' }}"
     data-show-success="{% if settings.show_success_message == false %}false{% else %}true{% endif %}"
     data-hide-bar-after-threshold="{% if settings.hide_bar_after_threshold == true %}true{% else %}false{% endif %}"
     data-position="{{ settings.position | default: 'above-header' }}"data-bg-color="{{ settings.background_color | default: '#4CAF50' }}"
     data-width="{{ settings.width | default: 90 }}"
     data-margin-top="{{ settings.margin_top | default: 20 }}"
     data-bar-height="{{ settings.bar_height | default: 40 }}"
     data-icon-size="{{ settings.icon_size | default: 20 }}"
     data-transparent-bg="{% if settings.transparent_bg == true %}true{% else %}false{% endif %}">  <div class="delivery-bar-content">
    {% if settings.show_icon %}
      <img class="delivery-icon" 
           src="{{ settings.icon_image }}" 
           alt="Delivery" />
    {% endif %}
    
    <span id="delivery-message">
      {% assign message = settings.message | default: "Free delivery on orders over $199!" %}
      {{ message }}
    </span>
  </div>  {% if settings.closeable != false %}
    <button id="close-delivery-bar">×</button>
  {% endif %}
  
  <!-- Debug: sprawdź wartość closeable -->
  <!-- settings.closeable = {{ settings.closeable }} -->
</div>

<script>
(function() {
  // Zabezpieczenie przed wielokrotnym uruchomieniem
  if (window.freeDeliveryBarInitialized) {
    return;
  }
  window.freeDeliveryBarInitialized = true;

  const deliveryBar = document.getElementById('free-delivery-bar');
  const messageElement = document.getElementById('delivery-message');
  const closeButton = document.getElementById('close-delivery-bar');
  
  if (!deliveryBar) {
    console.error('Nie znaleziono elementu free-delivery-bar');
    return;
  }
  
  // 🔥 TERAZ odczytaj zapisaną wiadomość (po zdefiniowaniu messageElement)
  const savedMessage = localStorage.getItem('deliveryBarMessage');
  const savedBarState = localStorage.getItem('deliveryBarState'); // hidden/visible

  // 🧹 WYCZYŚĆ LOCALSTORAGE Z IKON - może zawierać stare HTML z ikonami
  if (savedMessage && (savedMessage.includes('<img') || savedMessage.includes('delivery-icon'))) {
    console.log('🧹 Clearing localStorage - contains old icon HTML');
    localStorage.removeItem('deliveryBarMessage');
  } else if (savedMessage) {
    messageElement.textContent = savedMessage; // ← textContent zamiast innerHTML!
    console.log('📱 Restored message from localStorage:', savedMessage);
  }

  // Ustaw stan paska na podstawie zapisanego stanu
  if (savedBarState === 'hidden') {
    deliveryBar.classList.add('hidden');
    console.log('📱 Restored bar state: hidden');
  } else if (savedBarState === 'visible') {
    deliveryBar.classList.remove('hidden');
    console.log('📱 Restored bar state: visible');
  }
  const threshold = parseInt(deliveryBar.getAttribute('data-threshold'));
  const generalMessage = deliveryBar.getAttribute('data-general-message');
  const showProgress = deliveryBar.getAttribute('data-show-progress') === 'true';  const progressMessage = deliveryBar.getAttribute('data-progress-message');
  const successMessage = deliveryBar.getAttribute('data-success-message');  const showSuccess = deliveryBar.getAttribute('data-show-success') === 'true';
  const hideBarAfterThreshold = deliveryBar.getAttribute('data-hide-bar-after-threshold') === 'true';
  const position = deliveryBar.getAttribute('data-position') || 'above-header';const bgColor = deliveryBar.getAttribute('data-bg-color');
  const width = parseInt(deliveryBar.getAttribute('data-width')) || 90;  const marginTop = parseInt(deliveryBar.getAttribute('data-margin-top'));
  const barHeight = parseInt(deliveryBar.getAttribute('data-bar-height')) || 40;
  const transparentBg = deliveryBar.getAttribute('data-transparent-bg') === 'true';  console.log('=== FREE DELIVERY BAR INIT ===');
  console.log('Threshold:', threshold);
  console.log('Position:', position);
  console.log('Bar height:', barHeight);
    // Debug - sprawdź czy header istnieje i ma padding
  if (position === 'above-header') {
    const header = document.querySelector('header.header');
    console.log('Header found:', !!header);
    if (header) {
      console.log('Current header padding-top:', getComputedStyle(header).paddingTop);
      console.log('Header element:', header);
    }
  }
  
  // USTAW SZEROKOŚĆ, MARGIN-TOP I WYSOKOŚĆ DYNAMICZNIE
  deliveryBar.style.setProperty('width', width + '%', 'important');
  deliveryBar.style.setProperty('margin-top', marginTop + 'px', 'important');
  deliveryBar.style.setProperty('height', barHeight + 'px', 'important');
  // Check if bar was previously closed
  if (localStorage.getItem('deliveryBarClosed') === 'true') {
    deliveryBar.classList.add('hidden');
    // Usuń padding z header jeśli pasek był zamknięty
    if (position === 'above-header') {
      const header = document.querySelector('header.header');
      if (header) {
        header.classList.add('delivery-bar-hidden');
        header.style.setProperty('padding-top', '0px', 'important');
      }
    }
    return;
  }
  
  // 🔥 SPRAWDŹ CZY PASEK POWINIEN BYĆ SCHOWANY NA POCZĄTKU
  if (position === 'above-header') {
    const header = document.querySelector('header.header');
    if (header) {
      // Jeśli pasek jest ukryty ale header ma padding - napraw to
      if (deliveryBar.classList.contains('hidden')) {
        header.classList.add('delivery-bar-hidden');
        header.style.setProperty('padding-top', '0px', 'important');
        console.log('🔧 Fixed header padding on page load - bar was hidden');
      } else {
        // Jeśli pasek jest widoczny ale header nie ma padding - napraw to
        header.classList.remove('delivery-bar-hidden');
        header.style.removeProperty('padding-top');
        console.log('🔧 Fixed header padding on page load - bar was visible');
      }
    }
  }
  
  let isBarVisible = !deliveryBar.classList.contains('hidden');

  // Update delivery message based on cart value
  function updateDeliveryMessage() {
    fetch('/cart.js')
      .then(response => response.json())
      .then(cart => {
        const cartTotal = cart.total_price / 100;
        console.log('🔄 Cart update - total:', cartTotal, 'threshold:', threshold);
        
        let finalMessage = generalMessage;
          if (cartTotal >= threshold) {
          // THRESHOLD REACHED
          if (showSuccess) {
            // Pokaż success message
            if (!isBarVisible) {
              fadeInBar();
            }
            isBarVisible = true;
            localStorage.setItem('deliveryBarState', 'visible');
              
            if (successMessage && successMessage.trim() !== '') {
              finalMessage = successMessage;
            } else {
              finalMessage = '🎉 You have free delivery!';
            }
            
            messageElement.textContent = finalMessage;
              
            if (!transparentBg) {
              deliveryBar.style.backgroundColor = bgColor;
            }
            
            console.log('✅ Showing success message');          } else if (hideBarAfterThreshold) {
            // Ukryj pasek całkowicie
            console.log('🚫 Hide bar after threshold is enabled - hiding bar');
            if (isBarVisible) {
              fadeOutBar(() => {
                localStorage.setItem('deliveryBarState', 'hidden');
              });
            }
            isBarVisible = false;
            return;
          } else {
            // Pokaż general message  
            if (!isBarVisible) {
              fadeInBar();
            }
            isBarVisible = true;
            localStorage.setItem('deliveryBarState', 'visible');
            
            finalMessage = generalMessage;
            messageElement.textContent = finalMessage;
            
            if (!transparentBg) {
              deliveryBar.style.backgroundColor = bgColor;
            }
            
            console.log('📋 Showing general message after threshold');
          }        } else {
          // PRÓG NIE OSIĄGNIĘTY
          // 🔥 ANIMUJ TYLKO JEŚLI PASEK BYŁ UKRYTY
          if (!isBarVisible) {
            fadeInBar();
          }
          isBarVisible = true;
          localStorage.setItem('deliveryBarState', 'visible');
            if (cartTotal === 0) {
            // Koszyk pusty - pokaż ogólną wiadomość
            finalMessage = generalMessage;
          } else if (showProgress) {
            // Koszyk niepusty i progress włączony - pokaż progress message
            const remaining = threshold - cartTotal;
            const formattedRemaining = remaining % 1 === 0 ? remaining.toString() : remaining.toFixed(2);
              
            finalMessage = progressMessage
              .replace('[remaining]', formattedRemaining)
              .replace('{remaining}', formattedRemaining)
              .replace('{amount}', threshold);
          } else {
            // Koszyk niepusty ale progress wyłączony - pokaż general message
            finalMessage = generalMessage;
          }
          
          messageElement.textContent = finalMessage;
          
          // Przywróć oryginalny kolor
          if (!transparentBg) {
            deliveryBar.style.backgroundColor = bgColor;
          }
          
          console.log('📊 Cart total:', cartTotal, 'Message type:', cartTotal === 0 ? 'general' : (showProgress ? 'progress' : 'general'));
        }
        
        // 🔥 ZAPISZ W LOCALSTORAGE
        localStorage.setItem('deliveryBarMessage', finalMessage);
      })
      .catch((error) => {
        console.error('❌ Cart fetch error:', error);
        // Fallback
        deliveryBar.classList.remove('hidden');
        let message = generalMessage || 'Free delivery available!';
        messageElement.textContent = message;
      });
  }

  // Funkcje animacji
  function fadeOutBar(callback) {
    console.log('🎬 fadeOutBar called, position:', position);
    
    // Jeśli pozycja to above-header, usuń padding z header PRZED animacją
    if (position === 'above-header') {
      const header = document.querySelector('header.header');
      console.log('🔍 Looking for header.header:', !!header);
      if (header) {
        console.log('📏 Current padding before removal:', getComputedStyle(header).paddingTop);
        
        // Dodaj klasę animowanego chowania
        header.classList.remove('delivery-bar-hidden');
        header.classList.add('delivery-bar-hiding');
        
        // Ustaw też inline style jako backup
        header.style.setProperty('padding-top', '0px', 'important');
        
        console.log('🔧 Added .delivery-bar-hiding class for animated removal');
        console.log('📏 Padding after removal:', getComputedStyle(header).paddingTop);
      }
    }
    
    deliveryBar.classList.add('fade-out');
    
    setTimeout(() => {
      deliveryBar.classList.add('hidden');
      deliveryBar.classList.remove('fade-out');
      
      // Po zakończeniu animacji zastąp klasę hiding na hidden
      if (position === 'above-header') {
        const header = document.querySelector('header.header');
        if (header) {
          header.classList.remove('delivery-bar-hiding');
          header.classList.add('delivery-bar-hidden');
        }
      }
      
      if (callback) callback();
    }, 1000); // Zwiększono czas na 1000ms żeby pasować do animacji CSS
  }

  function fadeInBar() {
    // 🔥 NAJPIERW USTAW OPACITY NA 0
    deliveryBar.classList.add('fade-out');
    deliveryBar.classList.remove('hidden');
    
    // Jeśli pozycja to above-header, przywróć padding do header
    if (position === 'above-header') {
      const header = document.querySelector('header.header');
      if (header) {
        // Usuń klasę CSS i inline style
        header.classList.remove('delivery-bar-hidden');
        header.style.removeProperty('padding-top');
        
        console.log('🔧 Removed .delivery-bar-hidden class and inline style');
        console.log('🔧 Restoring padding to main header:', header.className, barHeight + 'px');
      }
    }
    
    // 🔥 WYMYŚ REFLOW I NASTĘPNIE ANIMUJ
    deliveryBar.offsetHeight; // Force reflow
    
    setTimeout(() => {
      deliveryBar.classList.remove('fade-out');
    }, 10); // Krótkie opóźnienie
  }  // Obsługa zamknięcia paska - tylko jeśli przycisk istnieje
  if (closeButton) {
    closeButton.addEventListener('click', function() {
      // Jeśli pozycja to above-header, usuń padding z header
      if (position === 'above-header') {
        const header = document.querySelector('header.header');
        if (header) {
          header.classList.add('delivery-bar-hidden');
          header.style.setProperty('padding-top', '0px', 'important');
          console.log('🔧 Removing padding from main header on close:', header.className);
        }
      }
      
      deliveryBar.classList.add('hidden');
      localStorage.setItem('deliveryBarClosed', 'true');
      console.log('Bar closed by user');
    });
  } else {
    console.log('Close button not found - closeable setting is disabled');
  }

  // === CART EVENT LISTENERS ===
  
  // Standard Shopify cart events
  const cartEvents = [
    'cart:updated',
    'cart:changed', 
    'cart:refresh',
    'cartChanged',
    'ajaxCart:updated',
    'cart:build',
    'cart:requestComplete',
    'product:added-to-cart',
    'cart:item-added',
    'cart:item-removed',
    'cart:item-updated',
    'cart:cleared'
  ];

  cartEvents.forEach(eventName => {
    document.addEventListener(eventName, function(event) {
      console.log('🔔 Cart event detected:', eventName, event.detail);
      setTimeout(() => updateDeliveryMessage(), 100); // Small delay to ensure cart is updated
    });
  });

  // Window-level cart events
  window.addEventListener('cart:updated', function(event) {
    console.log('🔔 Window cart event:', event);
    setTimeout(() => updateDeliveryMessage(), 100);
  });

  // Theme-specific events (Dawn, Impulse, Brooklyn, etc.)
  const themeEvents = [
    'theme:cart:change',
    'theme:cart:updated', 
    'cart-drawer:open',
    'cart-drawer:close',
    'mini-cart:open',
    'mini-cart:close',
    'variant:add',
    'variant:remove'
  ];

  themeEvents.forEach(eventName => {
    document.addEventListener(eventName, function(event) {
      console.log('🔔 Theme cart event:', eventName);
      setTimeout(() => updateDeliveryMessage(), 100);
    });
  });

  // Custom event for manual triggering
  window.addEventListener('freeDeliveryBar:update', function() {
    console.log('🔔 Manual update triggered');
    updateDeliveryMessage();
  });

  // Enhanced fetch interception for cart endpoints
  const originalFetch = window.fetch;
  window.fetch = function(...args) {
    const promise = originalFetch.apply(this, args);
    
    const url = args[0];
    const isCartRequest = typeof url === 'string' && (
      url.includes('/cart/add') || 
      url.includes('/cart/update') || 
      url.includes('/cart/change') ||
      url.includes('/cart/clear') ||
      url.includes('/cart.js') ||
      url.includes('/cart/') ||
      url.endsWith('/cart')
    );
    
    if (isCartRequest) {
      promise.then((response) => {
        if (response.ok) {
          console.log('🔔 Cart fetch intercepted:', url);
          setTimeout(() => updateDeliveryMessage(), 150);
        }
      }).catch(() => {
        console.error('Cart error:', error);
      });
    }
    
    return promise;
  };

  // Intercept XMLHttpRequest for older implementations
  const originalXHROpen = XMLHttpRequest.prototype.open;
  const originalXHRSend = XMLHttpRequest.prototype.send;

  XMLHttpRequest.prototype.open = function(method, url, ...args) {
    this._url = url;
    return originalXHROpen.call(this, method, url, ...args);
  };

  XMLHttpRequest.prototype.send = function(...args) {
    const xhr = this;
    
    const isCartRequest = this._url && (
      this._url.includes('/cart/add') ||
      this._url.includes('/cart/update') ||
      this._url.includes('/cart/change') ||
      this._url.includes('/cart/clear') ||
      this._url.includes('/cart.js') ||
      this._url.includes('/cart/')
    );

    if (isCartRequest) {
      xhr.addEventListener('readystatechange', function() {
        if (xhr.readyState === 4 && xhr.status >= 200 && xhr.status < 300) {
          console.log('🔔 XHR cart request intercepted:', xhr._url);
          setTimeout(() => updateDeliveryMessage(), 150);
        }
      });
    }

    return originalXHRSend.call(this, ...args);
  };

  // Listen for form submissions to cart
  document.addEventListener('submit', function(event) {
    const form = event.target;
    if (form && form.action && (
      form.action.includes('/cart/add') ||
      form.action.includes('/cart/update') ||
      form.action.includes('/cart') ||
      form.querySelector('input[name="id"]') // Product form
    )) {
      console.log('🔔 Cart form submission detected');
      setTimeout(() => updateDeliveryMessage(), 200);
    }
  });

  // Listen for clicks on cart buttons (add to cart, quantity changes)
  document.addEventListener('click', function(event) {
    const target = event.target;
    const button = target.closest('button');
    
    if (button && (
      button.type === 'submit' ||
      button.classList.contains('btn-cart') ||
      button.classList.contains('add-to-cart') ||
      button.classList.contains('cart-item__remove') ||
      button.classList.contains('quantity__button') ||
      button.name === 'add' ||
      button.name === 'update' ||
      button.getAttribute('data-action') === 'add-to-cart'
    )) {
      console.log('🔔 Cart button clicked');
      setTimeout(() => updateDeliveryMessage(), 300);
    }
  });

  // MutationObserver for cart drawer/popup changes
  const observer = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
      if (mutation.type === 'childList') {
        const cartSelectors = [
          '.cart-drawer',
          '.cart-popup',
          '.mini-cart',
          '.cart-items',
          '.cart-item',
          '[id*="cart"]',
          '[class*="cart"]'
        ];
        
        cartSelectors.forEach(selector => {
          if (mutation.target.matches && mutation.target.matches(selector)) {
            console.log('🔔 Cart DOM change detected');
            setTimeout(() => updateDeliveryMessage(), 100);
          }
        });
      }
    });
  });

  observer.observe(document.body, {
    childList: true,
    subtree: true,
    attributes: false
  });

  // Fallback polling only as last resort - much less frequent
  let lastCartTotal = null;
  function fallbackCartCheck() {
    fetch('/cart.js')
      .then(response => response.json())
      .then(cart => {
        const currentTotal = cart.total_price / 100;
        
        // Only update if value changed
        if (currentTotal !== lastCartTotal) {
          lastCartTotal = currentTotal;
          console.log('🔔 Fallback polling detected cart change:', currentTotal);
          updateDeliveryMessage();
        }
      })
      .catch(() => {
        // Ignore errors in background
      });
  }

  // Reduced polling frequency - only as backup every 10 seconds
  setInterval(fallbackCartCheck, 10000);

  // Inicjalizacja
  console.log('🚀 Initializing...');
  
  // NAJPIERW sprawdź czy pasek powinien być ukryty na podstawie savedBarState
  if (savedBarState === 'hidden' && position === 'above-header') {
    const header = document.querySelector('header.header');
    if (header) {
      header.classList.add('delivery-bar-hidden');
      header.style.setProperty('padding-top', '0px', 'important');
      console.log('🔧 Hiding header padding on init - bar state was hidden');
    }
  }
  
  // Initial update on page load
  setTimeout(() => updateDeliveryMessage(), 100);
  
})();
</script>

{% schema %}
{
  "name": "Free Delivery Bar",
  "target": "section",
  "settings": [
    {
      "type": "paragraph",
      "content": "All settings (message, colors, position, styles) are managed through the app panel. This block automatically fetches settings from the app."
    },
    {
      "type": "paragraph", 
      "content": "To configure the bar, go to: Apps → Free Delivery → Settings"
    }
  ]
}
{% endschema %}
